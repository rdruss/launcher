kind: Template
apiVersion: v1
metadata:
  name: launcher-frontend
  annotations:
    openshift.io/display-name: "Fabric8 Launch - Frontend"
    description: This application contains the Frontend web service for the Launcher
    tags: instant-app,fabric8-launcher
    iconClass: icon-shadowman
    template.openshift.io/long-description: This application contains the Frontend web service
    template.openshift.io/provider-display-name: Red Hat, Inc.
    template.openshift.io/documentation-url: https://github.com/fabric8-launcher
    template.openshift.io/support-url: https://access.redhat.com
message: "The following service has been created in your project: launcher-frontend.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/fabric8-launcher"
labels:
  template: launcher-frontend
parameters:
- name: IMAGE
  value: fabric8/launcher-frontend
  required: true

- name: IMAGE_TAG
  value: latest
  required: true

- description: CPU request
  displayName: CPU request
  required: true
  name: CPU_REQUEST
  value: "10m"

- description: CPU limit
  displayName: CPU limit
  required: true
  name: CPU_LIMIT
  value: "50m"

- description: Memory request
  displayName: Memory request
  required: true
  name: MEMORY_REQUEST
  value: "8M"

- description: Memory limit
  displayName: Memory limit
  required: true
  name: MEMORY_LIMIT
  value: "64M"

- description: Number of deployment replicas
  displayName: Number of deployment replicas
  required: true
  name: REPLICAS
  value: "1"

objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: launcher-frontend
    annotations:
      configmap.fabric8.io/update-on-change: "launcher"
  spec:
    replicas: "${{REPLICAS}}"
    selector:
      service: launcher-frontend
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          service: launcher-frontend
      spec:
        containers:
        - image: ${IMAGE}:${IMAGE_TAG}
          imagePullPolicy: Always
          name: launcher-frontend
          ports:
          - containerPort: 8080
            protocol: TCP
          env:
          - name: LAUNCHER_BACKEND_URL
            valueFrom:
              configMapKeyRef:
                name: launcher
                key: launcher.backend.url
          - name: LAUNCHER_KEYCLOAK_URL
            valueFrom:
              configMapKeyRef:
                name: launcher
                key: launcher.keycloak.url
          - name: LAUNCHER_KEYCLOAK_REALM
            valueFrom:
              configMapKeyRef:
                name: launcher
                key: launcher.keycloak.realm
          - name: LAUNCHER_KEYCLOAK_CLIENT_ID
            valueFrom:
              configMapKeyRef:
                name: launcher
                key: launcher.keycloak.clientId
          - name: LAUNCHER_TRACKER_SEGMENT_TOKEN
            valueFrom:
              configMapKeyRef:
                name: launcher
                key: launcher.tracker.segment.token
          - name: LAUNCHER_SENTRY_DSN
            valueFrom:
              configMapKeyRef:
                name: launcher
                key: launcher.sentry.dsn
          resources: {}
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            httpGet:
              path: /launch/wizard
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 10
            periodSeconds: 20
          livenessProbe:
            httpGet:
              path: /launch/wizard
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 20
          resources:
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
        restartPolicy: Always
        dnsPolicy: ClusterFirst
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      service: launcher-frontend
    name: launcher-frontend
  spec:
    ports:
    - name: "8080"
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      service: launcher-frontend
    sessionAffinity: None
    type: ClusterIP

