package io.fabric8.launcher.osio.steps;

import java.util.HashMap;
import java.util.Map;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;

import io.fabric8.launcher.osio.Annotations;
import io.fabric8.launcher.osio.che.CheStack;
import io.fabric8.launcher.osio.che.CheStackDetector;
import io.fabric8.launcher.osio.projectiles.OsioProjectile;
import io.fabric8.launcher.service.git.api.GitService;
import io.fabric8.launcher.service.openshift.api.OpenShiftService;

/**
 * @author <a href="mailto:ggastald@redhat.com">George Gastaldi</a>
 */
@RequestScoped
public class OpenShiftSteps {

    @Inject
    private GitService gitService;

    @Inject
    private OpenShiftService openShiftService;

    public void createBuildConfig(OsioProjectile projectile) {
        Map<String, String> annotations = getBuildConfigAnnotations(projectile);

    }

    private Map<String, String> getBuildConfigAnnotations(OsioProjectile projectile) {
        Map<String, String> annotations = new HashMap<>();
        // lets add the annotations so that it looks like its generated by jenkins-sync plugin to minimise duplication
        annotations.put(Annotations.JENKINS_GENERATED_BY, "jenkins");
        annotations.put(Annotations.JENKINS_JOB_PATH, gitService.getLoggedUser().getLogin() + "/" + projectile.getGitRepositoryName() + "/master");
        CheStack cheStack = CheStackDetector.detectCheStack(projectile.getProjectLocation());
        if (cheStack != null) {
            annotations.put(Annotations.CHE_STACK, cheStack.getId());
        }
        // lets disable jenkins-sync plugin creating the BC as well to avoid possible duplicate
        annotations.put(Annotations.JENKINS_DISABLE_SYNC_CREATE_ON, "jenkins");
        return annotations;
    }
}
